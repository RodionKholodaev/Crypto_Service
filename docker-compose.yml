services:
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d mydb"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  celery:
    build: .
    command: /bin/sh -c "ntpdate pool.ntp.org && su appuser -c 'celery -A cryptoservice worker --loglevel=info'"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app:/app/Crypto_Service
      - broker_connection_retry_on_startup=true
    cap_add:
      - SYS_TIME
  

  celery-beat:
    build: .
    command: /bin/sh -c "ntpdate pool.ntp.org && su appuser -c 'celery -A cryptoservice beat --loglevel=info'"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app:/app/Crypto_Service
      - broker_connection_retry_on_startup=true
    cap_add:
      - SYS_TIME

  web:
    build: .
    command: /bin/sh -c "ntpdate pool.ntp.org && python manage.py collectstatic --noinput && su appuser -c 'gunicorn --bind 0.0.0.0:8000 cryptoservice.wsgi'"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles  # Выносим статику в отдельный volume
      - media_volume:/app/media    # Выносим медиа в отдельный volume
    expose:
      - "8000"  # Теперь только expose вместо ports
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app:/app/Crypto_Service
    cap_add:
      - SYS_TIME

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - web


volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: