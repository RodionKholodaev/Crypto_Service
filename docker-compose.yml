services:
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d mydb"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    command: redis-server --appendonly yes --save ""
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  celery:
    restart: unless-stopped
    build: .
    command: su appuser -c 'celery -A cryptoservice worker --loglevel=info -Q payments,trading,default'
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - PYTHONPATH=/app:/app/Crypto_Service
      - broker_connection_retry_on_startup=true

  celery-beat:
    restart: unless-stopped
    build: .
    command: su appuser -c 'celery -A cryptoservice beat --loglevel=info'
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - PYTHONPATH=/app:/app/Crypto_Service
      - broker_connection_retry_on_startup=true

  web:
    build: .
    command: /bin/sh -c "python manage.py collectstatic --noinput && su appuser -c 'gunicorn --bind 0.0.0.0:8000 cryptoservice.wsgi'"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONPATH=/app:/app/Crypto_Service

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - certbot-var:/var/www/certbot
    depends_on:
      - web

  certbot:
    image: certbot/certbot:latest
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/www/certbot
    depends_on:
      nginx:
        condition: service_started
    command: sh -c "certbot certonly --webroot --webroot-path=/var/www/certbot --email ${LETSENCRYPT_EMAIL:-kholodaev10e@mail.ru} --agree-tos --no-eff-email --rsa-key-size 4096 --keep-until-expiring --non-interactive -d cryptobot-hub.ru -d cryptobot-hub.online"

  nginx_ssl:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - ./nginx_ssl.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - certbot-etc:/etc/letsencrypt
    depends_on:
      certbot:
        condition: service_completed_successfully
      web:
        condition: service_started

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  certbot-etc:
  certbot-var: